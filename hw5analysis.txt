CS104 -- Homework 5: Runtime Analysis

1) Analyze the running time for figuring out which line a GOTO, GOSUB, IF jumps to. (That is, going from having the line number to actually knowing what command is on that line.) You can analyze them together if they take the same amount of time; otherwise, explain and analyze the differences. For the analysis of IF, you can exclude the part of figuring out if the Boolean Expression is true. 

	-At a high level, I have a vector "allLines" in my Program class (Program.h) that stores List structs that contain the line number and a pointer to the Command object on that line. The worst case is that the GOTO/GOSUB/IF is at the very beginning of the program, and the line we need to jump to is at the very end of this vector. For all GOTO, GOSUBL and IF objects, they hold ints as private data members that store the line number to jump to. First, we have to check if the line exists. From GoSub::execute() in Command.cpp (lines 222 - 227):
		std::map<int, Command*>::iterator it = Program::linejump.find(linej); <--- O(logn); Program::linejump is a map
		if (it == Program::linejump.end()) { <--- O(1)
			int line = Program::allLines[Program::itAllLines] -> value; <--- O(1)

			throw Error("GOSUB to non-existent line <", line, linej); <--- O(1)
		}

	If the line does exist, then I take that line number and traverse allLines until we find the index of allLines that matches that line number:

	-Here is an example of the implementation of that traversal in my GOSUB::execute() function in Command.cpp (lines 234 - 239):
		for (unsigned int i = 0; i<Program::allLines.size(); i++) { <--- O(n); n is the number of commands
			if (Program::allLines[i] -> value == linej) { <--- O(1)
				Program::itAllLines = i-1; <--- O(1); here we update the iterator currently going through allLines
				break; <--- O(1)
			}
		}

	-Therefore, this takes O(logn + n) = O(n), where n is the total number of lines/commands in the program we are running.


2) Analyze the running time for figuring out the command that a RETURN jumps to. That is, how long does it take to go from seeing RETURN until you know the command to go to.

	-At a high level, I have a stack "allGoSub" in my Program class (Program.h) that stores List structs that contain the line number where each GOSUB occurs and a pointer to the GoSub object on that line. The worst case is that the last GOSUB was right before RETURN was called. 
	-First of all, if allGoSub is empty, we throw an error, which is all done in O(1), since allGoSub.empty() is a O(1) operation. We pull from the top of that stack to retrieve the Line object that stores the GOSUB object we need and then traverse through the vector allLines to find the index of allLines that matches the line number. This is done in the Return::execute() function in Command.cpp (lines 270 - 275):
		for (unsigned int i = 0; i<Program::allLines.size(); i++) { <--- O(n)***
			if (Program::allLines[i] -> value == last->value) { <--- O(1)
				Program::itAllLines = i; <--- O(1)
				break; <--- O(1)
			}
		}
	- *** the reason this takes O(n) is because we are assuming that, for the worst case, the RETURN command in question is located at the very end of the sequence of lines/commands we are executing and the last GOSUB is located directly before that RETURN. Therefore, we must traverse all the way through the list of allLines to find that GOSUB.

	-Therefore, the total runtime for the whole operation is O(n), where n is the total number of lines/commands in the program we are running.


3) Analyze the running time for figuring out the value of a variable or overwriting the value of a variable.
	At a high level, I have a map "allVariables" in my Program class (Program.h) that stores strings that represent the names of variables as the keys and ints that represent the values of the variables as values. The worst case is that the variable is not in the map, because then to check for that, we would have to iterate through the entire map.

	- First, we must check if a variable is in allVariables. To do so, we call allVariables.find(), which takes O(logn).
		- Figuring out the value of a variable is done in the Variable::evaluate() function in ArithmeticExpression.cpp (lines 120-124):
			std::map<std::string, int>::iterator it = Program::allVariables.find(name);
			if (it != Program::allVariables.end()) {
				value = it->second;
			}  
		- Overwriting the value of a variable is done in the LetVar::execute() function in Command.cpp (lines 59 - 66):
			int y = _ae->evaluate(); <--- O(1)
			std::string name = _var->getName(); <--- O(1)
			std::map<std::string, int>::iterator it = Program::allVariables.find(name); <--- O(logn)
			if (it != Program::allVariables.end()) { <--- O(1)
				it->second = y; <--- O(1)
			}
			else { 
				Program::allVariables[name] = y; <--- O(logn)
			}
	- Thus, the total runtime for the whole operation will be O(logn) for figuring out the value and O(logn + logn) = O(logn) for overwriting the value of a variable/initializing a variable, where n is the number of variables we have initialized (by using LET).


4) Analyze the running time for figuring out the value of an array entry, assuming you have already figured out the numerical value of the index. (That is, you have already calculated <AEXP> in VAR [<AEXP>].)

	-At a high level, all of the varable arrays are stored into a map "allArrays" that has strings that represent the names of the different arrays as keys and a map<int, int> that stores all of the values of the arrays at all their positions as a value (the first int is the position and the second int is the value at that position). To find out the value of an array entry, that is done in the VarArray::evaluate() function in ArithmeticExpression.cpp (lines 158-169):
		std::map<std::string, std::map<int, int>* >::iterator it = Program::allArrays.find(name); <--- O(log n)
		if (it != Program::allArrays.end()) { <--- O(1)
			std::map<int, int>::iterator it2 = it->second->find(inner->evaluate()); <--- O(log m)
			if (it2 != it->second->end()) { <--- O(1)
				return it2->second; <--- O(1)
			}
		}
		return 0; <--- O(1)

	- Thus, the total runtime for the whole operation will be O(logn + logm) = O(log (n*m)), where n is the number of variable arrays we have initialized (by using LET) and m is the number of positions we have initialized in each array.